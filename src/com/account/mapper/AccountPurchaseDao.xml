<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.account.dao.AccountPurchaseDao">
    
	<sql id="accountPurchaseColumns">
		a.id AS "id",
		a.title AS "title",
		a.ordernum AS "ordernum",
		a.inquirynum AS "inquirynum",
		a.maker AS "maker",
		a.checker AS "checker",
		a.proc_ins_id AS "procInsId",
		a.create_by AS "createBy",
		a.create_date AS "createDate",
		a.update_by AS "updateBy",
		a.update_date AS "update",
		a.del_flag AS "delFlag",
		a.act_checker AS "act_checker",
		a.make_date AS "makeDate"
	</sql>
	
	<sql id="accountPurchaseJoins">
	</sql>
    
	<select id="get" resultType="com.account.entity.AccountPurchase">
		SELECT 
			<include refid="accountPurchaseColumns"/>,b.supplierNum,b.caigouname AS 'supplier',b.contractTitle AS 'contracttitle',b.papercontract,b.contractnum	
		FROM account_purchase a
		LEFT JOIN account_contract b ON a.inquirynum=b.id
		WHERE a.id = #{id}
	</select>
	
	<select id="findList" resultType="com.account.entity.AccountPurchase">
		SELECT 
			<include refid="accountPurchaseColumns"/>
		FROM account_purchase a
		WHERE 
			a.del_flag = 0
			<if test="title!=null and title!=''">
			AND a.title LIKE concat('%',#{title},'%')
			</if>
			<if test="procInsId!=null &amp;&amp; procInsId!=''">
				<if test='procInsId=="0"'>
					AND a.proc_ins_id!='end'	
				</if>
				<if test='procInsId=="1"'>
					AND a.proc_ins_id='end'
				</if>
			</if>
		<choose>
			<when test="page !=null ">
			</when>
			<otherwise>
			</otherwise>
		</choose>
		ORDER BY a.create_date DESC
	</select>
	
	<select id="findAllList" resultType="com.account.entity.AccountPurchase">
		SELECT 
			<include refid="accountPurchaseColumns"/>
		FROM account_purchase a
		<include refid="accountPurchaseJoins"/>
		<where>
			a.del_flag = 0
		</where>		
		<choose>
			<when test="page !=null ">
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert" parameterType="com.account.entity.AccountPurchase">
		INSERT INTO account_purchase(
			id,
			title,
			ordernum,
			inquirynum,
			maker,
			checker,
			proc_ins_id,
			create_by,
			create_date,
			update_by,
			update_date,
			act_checker,
			del_flag,
			make_date
		) VALUES (
			#{id},
			#{title},
			#{ordernum},
			#{inquirynum},
			#{maker},
			#{checker},
			#{procInsId},
			#{createBy},
			#{createDate},
			#{updateBy},
			#{update},
			#{act_checker},
			#{delFlag},
			#{makeDate}
		)
	</insert>
	
	<update id="update" parameterType="com.account.entity.AccountPurchase">
		UPDATE account_purchase SET 	
			 <if test="procInsId != null">
				proc_ins_id = #{procInsId},
		    </if>
			act_checker=#{act_checker},
			update_by = #{updateBy},
			update_date = #{update}
		WHERE id = #{id}
	</update>
	
	<update id="delete" parameterType="string">
		UPDATE account_purchase SET 
			del_flag = 1
		WHERE id = #{id}
	</update>
	<select id="findAllorderNum" resultType="com.account.entity.AccountPurchase">
	SELECT a.id as id,a.orderNum as ordernum,a.title as title FROM account_purchase a
	</select>
	
	
<select id="selectView" resultType="com.account.entity.AccountPurchase">
		SELECT 
			
			<include refid="accountPurchaseColumns"/>
			
		FROM 
			account_purchase a,
			account_requisition_act act
		where
			a.del_flag = 0
			and act.requisition_id = a.id
			<if test='title != null and title != ""'>
				and a.title  LIKE concat('%',#{title},'%')
			</if>
			<if test='procInsId != null and procInsId != ""'>
				<if test='procInsId =="1"'>
					and ( a.proc_ins_id = 'start' or a.proc_ins_id = 'rejected' )
					and act.state = 0
					and a.act_checker = #{checker}
				</if>
				<if test='procInsId =="2"'>
					and ( a.proc_ins_id = 'start' or a.proc_ins_id = 'rejected' )
					and act.state = 1
					and ( act.checker_name = #{checker} )
				</if>
				<if test='procInsId =="3"'>
					and ( a.proc_ins_id = 'end' )
					and ( act.checker_name = #{checker} )
				</if>
				<if test='procInsId =="4"'>
					and a.create_by = #{checker}
				</if>
			</if>
			<if test='startTime != null and startTime != ""'>
				<![CDATA[and UNIX_TIMESTAMP(a.create_date) >= UNIX_TIMESTAMP('${startTime} 00:00:00')]]>  	
			</if>
			<if test='endTime != null and endTime != ""'>
				<![CDATA[and UNIX_TIMESTAMP(a.create_date) <= UNIX_TIMESTAMP('${endTime} 23:59:59')]]>
			</if>
			<if test='procInsId != null and procInsId =="2"'>
				GROUP BY a.id
			</if>
			<if test='procInsId != null and procInsId =="3"'>
				GROUP BY a.id
			</if>
			<if test='procInsId != null and procInsId =="4"'>
				GROUP BY a.id
			</if>
			order by a.create_date desc
			<if test="paging != null">
	        	<include refid="com.account.dao.SqlFragment.paging" />
	      	</if>
	      	;
	</select>
	
	<select id="selectViewCount" resultType="int">
		SELECT 
			ifnull( count(DISTINCT a.id) , 0 )
		FROM 
			account_purchase a,
			account_requisition_act act
		where
			a.del_flag = 0
			and act.requisition_id = a.id
			<if test='title != null and title != ""'>
				and a.title  LIKE concat('%',#{title},'%')
			</if>
			<if test='procInsId != null and procInsId != ""'>
				<if test='procInsId =="1"'>
					and ( a.proc_ins_id = 'start' or a.proc_ins_id = 'rejected' )
					and act.state = 0
					and a.act_checker = #{checker}
				</if>
				<if test='procInsId =="2"'>
					and ( a.proc_ins_id = 'start' or a.proc_ins_id = 'rejected' )
					and act.state = 1
					and ( act.checker_name = #{checker} )
				</if>
				<if test='procInsId =="3"'>
					and ( a.proc_ins_id = 'end' )
					and ( act.checker_name = #{checker} )
				</if>
				<if test='procInsId =="4"'>
					and a.create_by = #{checker}
				</if>
			</if>
			<if test='startTime != null and startTime != ""'>
				<![CDATA[and UNIX_TIMESTAMP(a.create_date) >= UNIX_TIMESTAMP('${startTime} 00:00:00')]]>  	
			</if>
			<if test='endTime != null and endTime != ""'>
				<![CDATA[and UNIX_TIMESTAMP(a.create_date) <= UNIX_TIMESTAMP('${endTime} 23:59:59')]]>
			</if>
	      	;
	</select>
</mapper>